#                  + windows_phone
#                  , data=cast_shaped_df_filtered
# )
# summary(driver_lpm)
## Run the logit model - logisitic regression is binary.
## Need to update the format to have questions have
## answers (numbers) associated with the answer
## selection that was made. Add OCID
driver_logit <- glm(ms_store ~ external_display
+ budget
+ programs_simultaneous
+ storage
+ screensize_or_weight
+ software
+ dax_platform
+ monday
+ tuesday
+ thursday
+ friday
+ saturday
+ sunday
+ microsoft
+ organic_search
+ other_referrer_cat
+ social_media
+ android
+ other_os
+ ios
+ linux
+ mac_os
+ windows_phone
, data=cast_shaped_df_filtered
, family=binomial (link='logit'))
summary(driver_logit)
odds_results
summary(driver_logit)
coefficients <- as.data.frame(exp(coef(driver_logit)))
confidence_intervals <- as.data.frame(exp(confint(driver_logit)))
head(df)
tail(df)
myServer <- "vaqfys458u.database.windows.net"
myUser <- "ms-surface-bh-admin"
myPassword <- "2o5j9SF*Lw6i*ysrm^%nS@Q#"
myDB <- "ms-surface-bh"
myDriver <- "SQL Server"
connectionString <- paste0(
"Driver=", myDriver,
";Server=", myServer,
";Database=", myDB,
";Uid=", myUser,
";Pwd=", myPassword
)
## Run SQL Query from db
sqlQuery <- "select * from FactHMCDriver"
conn <- odbcDriverConnect(connectionString)
df <- tbl_df(sqlQuery(conn, sqlQuery))
close(conn)
require(sqldf)
require(dplyr)
require(plyr)
require(tidyr)
require(RODBC)
require(reshape2)
require(aod)
require(MASS)
## Connect to Azure db
myServer <- "vaqfys458u.database.windows.net"
myUser <- "ms-surface-bh-admin"
myPassword <- "2o5j9SF*Lw6i*ysrm^%nS@Q#"
myDB <- "ms-surface-bh"
myDriver <- "SQL Server"
connectionString <- paste0(
"Driver=", myDriver,
";Server=", myServer,
";Database=", myDB,
";Uid=", myUser,
";Pwd=", myPassword
)
## Run SQL Query from db
sqlQuery <- "select * from FactHMCDriver"
conn <- odbcDriverConnect(connectionString)
df <- tbl_df(sqlQuery(conn, sqlQuery))
close(conn)
View(df)
View(df)
View(df)
View(df)
View(cast_shaped_df_filtered)
# Running an ols model
driver_lpm <- lm(ms_store ~ external_display
+ storage
+ budget
+ programs_simultaneous
+ screensize_or_weight
+ software
+ monday
+ saturday
+ sunday
+ thursday
+ tuesday
+ wednesday
+ microsoft
+ organic_search
+ other_referrer_cat
+ social_media
+ android
+ other_os
+ ios
+ linux
+ mac_os
+ windows_phone
, data=cast_shaped_df_filtered
)
summary(driver_lpm)
driver_lpm_results <- bind_cols(
as.data.frame(coef(driver_lpm))
, as.data.frame(confint(driver_lpm)))
write.table(driver_lpm_results
, file="question_results_lpm.csv"
, sep=","
, row.names=FALSE)
require(sqldf)
require(dplyr)
require(plyr)
require(tidyr)
require(RODBC)
require(reshape2)
require(aod)
require(MASS)
require(shiny)
myConnect <- vector()
myConnect[1] <- "vaqfys458u.database.windows.net"
myConnect[2] <- "ms-surface-bh-admin"
myConnect[3] <- "2o5j9SF*Lw6i*ysrm^%nS@Q#"
myConnect[4] <- "ms-surface-bh"
myConnect[5] <- "SQL Server"
myConnect
myConnect[1]
connectionString <- paste0(
"Driver=", myConnect[1],
";Server=", myConnect[2],
";Database=", myConnect[3],
";Uid=", myConnect[4],
";Pwd=", myConnect[5]
)
connectionString
sqlQuery <- paste("select * from", tableName)
tableName <- "FactHMCDriver"
sqlQuery <- paste("select * from", tableName)
conn <- odbcDriverConnect(connectionString)
file <- tbl_df(sqlQuery(conn, sqlQuery))
close(conn)
conn <- odbcDriverConnect(connectionString)
sqlQuery
sqlQuery2 <- "select * from FactHMCDriver"
equals(sqlQuery2, sqlQuery)
?equals
sqlQuery2 = sqlAuery
sqlQuery2 = sqlQuery
sqlQuery <- paste("select * from", tableName)
sqlQuery2 <- "select * from FactHMCDriver"
sqlQuery2 == sqlQuery
conn <- odbcDriverConnect(connectionString)
conn <- odbcDriverConnect(connectionString)
myServer <- "vaqfys458u.database.windows.net"
myUser <- "ms-surface-bh-admin"
myPassword <- "2o5j9SF*Lw6i*ysrm^%nS@Q#"
myDB <- "ms-surface-bh"
myDriver <- "SQL Server"
connectionString2 <- paste0(
"Driver=", myDriver,
";Server=", myServer,
";Database=", myDB,
";Uid=", myUser,
";Pwd=", myPassword
)
connectionString2 == connectionString
connectionString2
connectionString
myConnect
connectionString <- paste0(
"Driver=", myConnect[5],
";Server=", myConnect[1],
";Database=", myConnect[4],
";Uid=", myConnect[2],
";Pwd=", myConnect[3]
)
connectionString2 <- paste0(
"Driver=", myDriver,
";Server=", myServer,
";Database=", myDB,
";Uid=", myUser,
";Pwd=", myPassword
)
connectionString == connectionString2
myConnect[1] <- "vaqfys458u.database.windows.net"
myConnect <- vector()
myConnect[1] <- "vaqfys458u.database.windows.net"
myConnect[2] <- "ms-surface-bh-admin"
myConnect[3] <- "2o5j9SF*Lw6i*ysrm^%nS@Q#"
myConnect[4] <- "ms-surface-bh"
myConnect[5] <- "SQL Server"
myConnect
tableName <- "FactHMCDriver"
databaseInjection <- function(myConnect, tableName) {
connectionString <- paste0(
"Driver=", myConnect[5],
";Server=", myConnect[1],
";Database=", myConnect[4],
";Uid=", myConnect[2],
";Pwd=", myConnect[3]
)
sqlQuery <- paste("select * from", tableName)
conn <- odbcDriverConnect(connectionString)
file <- tbl_df(sqlQuery(conn, sqlQuery))
close(conn)
}
databaseInjection(myConnect, tableName)
file
databaseInjection <- function(myConnect, tableName) {
connectionString <- paste0(
"Driver=", myConnect[5],
";Server=", myConnect[1],
";Database=", myConnect[4],
";Uid=", myConnect[2],
";Pwd=", myConnect[3]
)
sqlQuery <- paste("select * from", tableName)
conn <- odbcDriverConnect(connectionString)
file <- tbl_df(sqlQuery(conn, sqlQuery))
close(conn)
return(file)
}
file <- databaseInjection(myConnect, tableName)
file
View(file)
library(caret)
View(segmentationOriginal)
data(segmentationOriginal)
data(segmentationOriginal)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
View(segmentationOriginal)
View(segmentationOriginal)
library(dplyr)
training <- filter(segmentationOriginal, Case == "train")
View(training)
training <- filter(segmentationOriginal, Case == "Train")
View(training)
testing <- filter(segmentationOriginal, Case == "Test")
set.seet(125)
set.seed(125)
set.seed(125)
## Question #1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(dplyr)
training <- filter(segmentationOriginal, Case == "Train")
testing <- filter(segmentationOriginal, Case == "Test")
modFIt <- train(Class ~ ., method="rpart", data=training)
modFit
set.seed(125)
library(caret)
library(dplyr)
training <- filter(segmentationOriginal, Case == "Train")
testing <- filter(segmentationOriginal, Case == "Test")
modFIt <- train(Class ~ ., method="rpart", data=training)
modFit
library(caret)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
install.packages("e1071")
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
fancyRpartPlot(modFIt$finalModel)
install.packages("fancyRpartPlot")
install.packages("rattle")
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages(pkgs = "caret",
dependencies = c("Depends", "Imports"))
install.packages(pkgs = "caret", dependencies = c("Depends",
training <- filter(segmentationOriginal, Case == "Train")
testing <- filter(segmentationOriginal, Case == "Test")
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
set.seed(125)
fancyRpartPlot(modFit$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(dplyr)
library(rattle)
fancyRpartPlot(modFit$finalModel)
View(testing)
names(testing)
predict(modFit, newdata=testing)
training$prediction <- predict(modFit, newdata=testing)
View(training)
names(training)
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
training$prediction <- predict(modFit, newdata=testing)
testSet1 <- training %>%
filter(TotalIntench2 = 23,000) %>%
filter(FiberWidthCh1 = 10) %>%
filter(PerimStatusCh1=2)
testSet1 <- training %>%
filter(TotalIntench2 = 23,000) %>%
filter(FiberWidthCh1 = 10) %>%
filter(PerimStatusCh1 = 2)
testSet1 <- testing %>%
filter(TotalIntench2 = 23,000) %>%
filter(FiberWidthCh1 = 10) %>%
filter(PerimStatusCh1 = 2)
names(testing)
testSet1 <- testing %>%
filter(TotalIntenCh2 = 23,000) %>%
filter(FiberWidthCh1 = 10) %>%
filter(PerimStatusCh1 = 2)
testSet1 <- testing %>%
filter(TotalIntenCh2 == 23,000) %>%
filter(FiberWidthCh1 == 10) %>%
filter(PerimStatusCh1 == 2)
testSet1 <- testing %>%
filter(TotalIntenCh2 == 23000) %>%
filter(FiberWidthCh1 == 10) %>%
filter(PerimStatusCh1 == 2)
View(testSet1)
predict(modFit, newdata=na.omit(testing))
length(predict(modFit, newdata=na.omit(testing)))
testing$prediction <- length(predict(modFit, newdata=na.omit(testing)))
View(testing)
names(testing)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
fancyRpartPlot(modFit$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(dplyr)
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE)
plot(modFit$finalModel, uniform=TRUE); text(modFit$finalModel, use.n=TRUE, all=TRUE, CEX=.8)
training <- filter(segmentationOriginal, Case == "Train")
testing <- filter(segmentationOriginal, Case == "Test")
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
plot(modFit$finalModel, uniform=TRUE); text(modFit$finalModel, use.n=TRUE, all=TRUE, CEX=.8)
training <- filter(segmentationOriginal, Case == "Train")
testing <- filter(segmentationOriginal, Case == "Test")
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
plot(modFit$finalModel, uniform=TRUE); text(modFit$finalModel, use.n=TRUE, all=TRUE, CEX=.8)
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
plot(modFit$finalModel, uniform=TRUE)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
prettyTree(modFit$finalModel)
install.packages("DMwR")
library(GMwR)
library(DMwR)
prettyTree(modFit$rpart)
library(rattle)
fancyRpartPlot(modFIt)
fancyRpartPlot(modFit)
fancyRpartPlot(modFit$finalModel)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret)
fancyRpartPlot(modFit$finalModel)
?fancyRpartPlot
library(rattle)
fancyRpartPlot(modfit$finalModel)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library(rpart)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(dplyr)
library(rattle)
library(rpart)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
modFit
training <- filter(segmentationOriginal, Case == "Train")
testing <- filter(segmentationOriginal, Case == "Test")
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
fancyRpartPlot(modFit$finalModel)
training <- filter(segmentationOriginal, Case == "Train")
testing <- filter(segmentationOriginal, Case == "Test")
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
str(training)
View(training)
training <- filter(segmentationOriginal, Case == "Train")
testing <- filter(segmentationOriginal, Case == "Test")
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
modFit
fancyRpartPlot(modFit$finalModel)
training <- filter(segmentationOriginal, Case == "Train")
testing <- filter(segmentationOriginal, Case == "Test")
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
fancyRpartPlot(modFit$finalModel)
training <- training[,-1];training <- [,-1]
training <- training[,-1];training <- training[,-1]
View(training)
training <- filter(segmentationOriginal, Case == "Train")
View(training)
training <- training[,-1]
View(training)
training <- training[,-1]
View(training)
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
fancyRpartPlot(modFit$finalModel)
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(olive)
modFit <- train(Area ~ ., method="rpart", data=olive)
predict(modFit, newData = newdata)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modFit <- train(Area ~ ., method="rpart", data=olive)
predict(modFit, newData = newdata)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modFit <- train(Area ~ ., method="rpart", data=olive)
predict(modFit, newData = newdata)
print(modFit$finalModel)
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit
fancyRpartPlot(modFit$finalModel)
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modFit <- train(Area ~ ., method="rpart", data=olive)
predict(modFit, newData = newdata)
install.packages("shiny")
library(readr)
library(readr)
options(shiny.maxRequestSize = 9*1024^2)
shinyServer(function(input, output) {
output$contents <- renderTable({
inFile <- input$file1
if(is.null(inFile))
return(NULL)
read_csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
})
})
setwd("C:\Users\bhudnall\Documents\GitHub\Data-Product-Course")
setwd("C:\Users\bhudnall\Documents\GitHub\Data-Product-Course")
getwd()
getwd("C:/Users/bhudnall/Documents/GitHub/Data-Product-Course")
setwd("C:/Users/bhudnall/Documents/GitHub/Data-Product-Course")
getwd()
list.file()
list.files
list.files()
runApp("ShinyApp")
library(shiny)
runApp("ShinyApp")
runApp("ShinyApp")
shiny::runApp('ShinyApp')
