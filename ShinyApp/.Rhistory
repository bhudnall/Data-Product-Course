library(caret)
library(AlzheimerDisease)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
adData
View(adData)
predictors
?data.frame
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(testing)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
library(dplyr)
?grep
training <- training[,grep("^IL")]
training <- training[,grep("^IL", training)]
View(training)
training <- training %>% select(contains("IL"))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training %>% select(contains("IL"))
View(training)
training <- training %>% select(starts_with("IL"))
View(training)
?preprocess
?PreProcess
preProc <- preProcess(training
, method = "pca"
, pcaComp = 12
, thresh = 0.80)
predict(preProc, training)
preProc
preProc$rotation
View(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(testing)
View(training)
training <- training %>% select(c(starts_with("IL"), diagnosis))
View(training)
preProc <- preProcess(training
, method = "pca"
, thresh = 0.80)
diagnosis <- training %>% select(diagnosis)
trainingStripped <- training %>% select(starts_with("IL"))
preProc <- preProcess(trainingStripped
, method = "pca"
, thresh = 0.80)
preProc
as.data.frame(preProc)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training %>% select(starts_with("IL"))
preProc <- preProcess(training
, method = "pca"
, thresh = 0.80)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training %>% select(c(starts_with("IL"), diagnosis))
diagnosis <- training %>% select(diagnosis)
trainingStripped <- training %>% select(starts_with("IL"))
preProc <- preProcess(trainingStripped
, method = "pca"
, thresh = 0.80)
print(preProc)
modFit <- train(diagnosis~.,data=training, method="glm")
modFit <- train(diagnosis ~ ., data=training, method="glm")
modFit <- train(diagnosis ~ ., method="glm", data=training)
install.packages('e1071', dependencies=TRUE)
modFit <- train(diagnosis ~ ., method="glm", data=training)
modFit
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training %>% select(c(starts_with("IL"), diagnosis))
diagnosis <- training %>% select(diagnosis)
trainingStripped <- training %>% select(starts_with("IL"))
preProc <- preProcess(trainingStripped
, method = "pca"
, thresh = 0.80)
modFit <- train(diagnosis ~ ., method="glm", data=training)
modFit
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training %>% select(starts_with("IL"))
preProc <- preProcess(training
, method = "pca"
, thresh = 0.90)
preProc
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(log10(training$Superplasticizer))
?upper.tri
require(AppliedPredictiveModeling)
require(caret)
require(ElemStatLearn)
require(pgmm)
require(rpart)
require(gbm)
require(lubridate)
require(forecast)
require(e1071)
require(kernlab)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
concrete$CompressiveStrength <- factor(concrete$CompressiveStrength)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svm.model <- train(CompressiveStrength ~ ., data = training, method="svmRadial")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
concrete$CompressiveStrength <- factor(concrete$CompressiveStrength)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svm.model <- train(CompressiveStrength ~ ., data = training, method="svmRadial")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='bhudnall',
token='34AA2EFD9E833F051B6F86944E8456F2',
secret='<SECRET>')
shinyapps::setAccountInfo(name='bhudnall',
token='34AA2EFD9E833F051B6F86944E8456F2',
secret='XsLDB3Ozexlvga6TzGVb30cPMhNxV9pp3hSEvYyj')
125 + 150
a <- [(1 * (1/3))]
value1 <- 1 * 1/3
value1
value1 <- 1/3
value2 <- 1/5
value3 <- 1/10
value4 <- 1/5
value5 <- 3/20
value6 <- 1/20
value1
value1 + value2
value1 * value2
value1 + value2
value5 + value6
value4 * value5 * value6
value2 * value2
value2 * value3
value4 * value5 * value6
value1
value2 * value3
value4 * value5 * value6
value1
value2 + value3
value4 + value5 + value6
myArray <- (value1,
value2 + value3,
value4 + value5 + value6)
myArray <- [value1,
value2 + value3,
value4 + value5 + value6]
myArray <- c(value1, value2 + value3, value4 + value5 + value6)
myArray
myArray <- c(value1, value2, value3, value4 + value5, value6)
myArray
sum(myArray)
myArray <- c(value1, value2 + value3, value4 + value5 + value6)
myArray
sum(myArray)
myArray <- c(value1, value2, value3 + value4 + value5 + value6)
sum(myArray)
myArray <- c(value1, value2 + value3, value4 + value5 + value6)
myArray
sum(myArray)
myArray <- c(value1, value2, value3, value4 + value5, value6)
myArray
sum(myArray)
myArray <- c(value1 + value2, value3 + value4, value5 + value6)
myArray
sum(myArray)
myArray <- c(value1, value2 * value3, value4 * value5 * value6)
myArray
sum(myArray)
matrixOne <- matrix(
c(1, 2, 2, 5),
nrow=2,
ncol=2
)
matrixOne
matrixTwo <- matrix(
c(-1, 1),
nrow=2,
ncol=1
)
matrixTwo
matrixOne * matrixTwo + matrix3
matrixTwo + matrix3
matrixOne * matrixTwo
matrixTwo + matrixThree
matrixOne <- matrix(
c(1, 2, 2, 5),
nrow=2,
ncol=2
)
matrixTwo <- matrix(
c(-1, 1),
nrow=2,
ncol=1
)
matrixThree <- matrix(
c(-3, 0),
nrow=2,
ncol=1
)
matrixTwo + matrixThree
matrixOne * (matrixTwo + matrixThree)
matrixTwo <- c(1, -1)
matrixOne * matrixTwo
matrixOne <- matrix(
c(1, 2, 2, 5),
nrow=2,
ncol=2
)
matrixTwo <- c(1, -1)
matrixThree <- c(3, 0)
matrixOne * matrixTwo + matrixThree
matrixOne * matrixTwo
matrixOne %*% matrixTwo
matrixOne
matrixTwo
matrixOne %*% matrixTwo %+% matrixThree
matrixOne %*% matrixTwo + matrixThree
matrixOne %*% matrixTwo
matrixOne
matrixOne %*% matrixTwo
matrixOne %*% matrixTwo + matrixThree
matrixOne <- matrix(
c(1, 2, 2, 5),
nrow=2,
ncol=2
)
matrixTwo <- c(-1, 1)
matrixThree <- c(3, 0)
matrixOne %*% matrixTwo + matrixThree
mean(80, 125, 140, 85)
mean(25, 50)
mean(25, 50, 3)
x <- c(80, 125, 140, 85)
mean(x)
x <- c(1,2,3,4,5)
sd(x)
var(x)
x <- c(1,2,3,4,5)
var(x)
x
sd(x)
sqrt(2)
sqrt(4)
sqrt(15)
sqrt(2) = sd(x)
sqrt(2) == sd(x)
sqrt(2)
sd(x)
meanX <- mean(x)
sumX <- meanX - x
sumX
sumX <- x - meanX
sumX <- (x - meanX)^2
sumX <- sum((x - meanX)^2)
sumX <- sum((x - meanX)^2)/length(x)
x <- c(1,2,3,4,5)
meanX <- mean(x)
sumX <- sum((x - meanX)^2)/length(x)
sumX
sqrt(sumX)
1/2 * 1/2 * 1/2
as.fraction(1/2 * 1/2 * 1/2)
fractions(1/2 * 1/2 * 1/2)
mibrary(MASS)
library(MASS)
fractions(1/2 * 1/2 * 1/2)
matrixOne <- matrix(
c(1, 3, 5, 2, 4, 6),
nrow=2,
ncol=3
)
matrixOne
matrixOne <- matrix(
c(1, 2, 3, 4, 5, 6),
nrow=2,
ncol=3
)
matrixOne
)
matrixTwo <- matrix(
c(0, 1, 0, 1, 0, 1),
nrow=3,
ncol=2
)
matrixTwo
matrixOne
matrixOne %*% matrixTwo
4 * 8
sum([1:1000])
sum[1:1000]
source('~/.active-rstudio-document', echo=TRUE)
x <- [1:1000]
x <- 1:1000
sum(x)
sum(1:1000)
(1 + 1000) * 500
sum(1:1000)
(1 + 1000) * 500
1000*(500+1)
1000*500/2
sum(1:1000) == (1 + 1000) * 500
156 + 591 + 302 + 208 + 396
myArray <- c(value1, value2 * value3, value4 * value5 * value6)
myArray
sum(myArray)
myArray <- c(value1 + value2, value3 + value4, value5 + value6)
myArray
sum(myArray)
myArray <- c(value1, value2, value3, value4 + value5, value6)
myArray
sum(myArray)
myArray <- c(value1, value2, value3 + value4 + value5 + value6)
myArray
sum(myArray)
myArray <- c(value1, value2 * value3, value4 * value5 * value6)
myArray
sum(myArray)
myArray <- c(value1 * value2, value3 * value4, value5 * value6)
myArray
sum(myArray)
myArray <- c(value1, value2, value3, value4 * value5, value6)
myArray
sum(myArray)
myArray <- c(value1, value2, value3 * value4 * value5 * value6)
myArray
sum(myArray)
130 + 150
.1 - .25
1 - .25
value1 <- 1/3
value2 <- 1/5
value3 <- 1/10
value4 <- 1/5
value5 <- 3/20
value6 <- 1/20
myArray <- c(value1, value2 * value3, value4 * value5 * value6)
myArray
sum(myArray)
myArray <- c(value1 * value2, value3 * value4, value5 * value6)
myArray
sum(myArray)
myArray <- c(value1, value2, value3, value4 * value5, value6)
myArray
sum(myArray)
myArray <- c(value1, value2, value3 * value4 * value5 * value6)
myArray
sum(myArray)
#A
myArray <- c(value1, value2 * value3, value4 * value5 * value6)
myArray
sum(myArray)
#B
myArray <- c(value1 * value2, value3 * value4, value5 * value6)
myArray
sum(myArray)
#c
myArray <- c(value1, value2, value3 * value4 * value5 * value6)
myArray
sum(myArray)
myArray <- c(value1, value2 * value3, value4 * value5 * value6)
myArray
sum(myArray)
myArray <- c(value1, value2 + value3, value4 + value5 + value6)
myArray
sum(myArray)
myArray <- c(value1 + value2, value3 + value4, value5 + value6)
myArray
sum(myArray)
myArray <- c(value1, value2, value3 + value4 + value5 + value6)
myArray
sum(myArray)
myArray <- c(value1, value2 + value3, value4 + value5 + value6)
myArray
sum(myArray)
#A
myArray <- c(value1, value2 + value3, value4 + value5 + value6)
myArray
#D
myArray <- c(value1, value2, value3 + value4 + value5 + value6)
myArray
x <- c(80, 125, 140, 85)
mean(x)
sumX <- sum((x - meanX)^2)/length(x)
sumX
meanX <- mean(x)
meanX
x <- c(1,2,3,4,5)
mean(x)
meanX
meanX <- mean(x)
meanX
sumX <- sum((x - meanX)^2)/length(x)
sumX
#D
myArray <- c(value1, value2, value3 + value4 + value5 + value6)
myArray
median(value1, value2, value3, value4, value5, value6)
median(c(value1, value2, value3, value4, value5 value6))
value1 <- 1/3
value2 <- 1/5
value3 <- 1/10
value4 <- 1/5
value5 <- 3/20
value6 <- 1/20
median(c(value1, value2, value3, value4, value5 value6))
median(c(value1, value2, value3, value4, value5, value6))
myArray <- c(value1, value2, value3 + value4 + value5 + value6)
myArray
help(glm)
shiny::runApp('Programming/R/Data-Product-Course/ShinyApp')
shiny::runApp('Programming/R/Data-Product-Course/ShinyApp')
shiny::runApp('Programming/R/Data-Product-Course/ShinyApp')
shiny::runApp('Programming/R/Data-Product-Course/ShinyApp')
shiny::runApp('Programming/R/Data-Product-Course/ShinyApp')
shiny::runApp('Programming/R/Data-Product-Course/ShinyApp')
View(data)
shiny::runApp('Programming/R/Data-Product-Course/ShinyApp')
shiny::runApp('Programming/R/Data-Product-Course/ShinyApp')
